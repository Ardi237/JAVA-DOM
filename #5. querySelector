---------------------------------
A. Umum :
1. pengertian : querySelector() adalah metode DOM di Javascript yang memungkinkan anda untuk memilih elemen HTML dalam dokumen menggunakan selector CSS. 
---------------------------------
2. Metode ini sangat berguna karena memberikan fleksibilitas dalam memilih elemen dengan memberikan fleksibilitas dalam memilih elemen dengna berbagai cara, termasuk ID, kelas, atribut, dan kombinasi dari berbagai selector CSS.
---------------------------------
3. Sintaks dasar : document.querySelector(selector);
//penjelasan : selector : parameter ini adalah string yang mewakili selector CSS yang digunakan untuk memilih elemen. Selector ini bisa beruap ID, Kelas, Tag, atau kombinasi dari beberapa selector CSS.
---------------------------------


B.  Cara kerja :
1. Pencarian Elemen : 
---------------------------------
1a : `querySelector`  : mencari elemen yang sesuai dengan selector CSS yang diberikan.
1b : Metode ini hanya mengembalika elemen pertama yang ditemukan yang cocok dengan selector.
---------------------------------
2. Pengembalian :
---------------------------------
2a : Mengembalikan elemen pertama yang cocok dengna selector yang diberikan. Jika tidak ada elemen yang cocok, metode ini mengembalikan `null`.
---------------------------------


C. Contoh Penggunaan :
1. Mengakses Elemen berdasarkan ID :
    <div id="main-content">Main Content</div>
    <button onclick="showContent()">Show Content</button>

    <script>
        function showContent() {
            // Mengakses elemen dengan ID "main-content"
            const content = document.querySelector('#main-content');
            console.log(content.textContent);
        }
    </script>
---------------------------------
//penjelasan :
1a : document.querySelector(`#main-content`) memilih elemen dengan ID 'main-content'. 
1b : Fungsi `showContent` mencetak teks dari elemen yang dipilih ke konsol.
---------------------------------
2. Mengakses Elemen berdasarkan Kelas :
 <p class="highlight">Highlighted Paragraph</p>
    <p class="normal">Normal Paragraph</p>
    <button onclick="showHighlighted()">Show Highlighted</button>

    <script>
        function showHighlighted() {
            // Mengakses elemen dengan kelas "highlight"
            const highlighted = document.querySelector('.highlight');
            console.log(highlighted.textContent);
        }
    </script>
---------------------------------
2a. `document.querySelector('.highlight')` memilih elemen pertama yang memiliki kelas 'highlight'.
2b. Fungsi `showHighlighted` mencetak teks dari elemen yang dipilih ke konsol.
---------------------------------
3. Mengakses elemen berdasarkan selector kompleks
---------------------------------
 <div class="container">
        <p class="text">First Paragraph</p>
        <p class="text">Second Paragraph</p>
    </div>
    <button onclick="showParagraph()">Show Paragraph</button>

    <script>
        function showParagraph() {
            // Mengakses elemen <p> pertama di dalam elemen dengan kelas         
    "container"
            const paragraph = document.querySelector('.container .text');
            console.log(paragraph.textContent);
        }
    </script>
---------------------------------
//penjelasan : 
3a. `document.querySelector(`.container .text`)` memilih elemen `<p>` pertama di dalam elemen dengan kelas `container` yang juga memiliki kelas `text`.
3b. Fungsi `showParagraph` mencetak teks dari elemen yang dipilih ke konsol.
---------------------------------


D. Keuntungan Menggunakan `querySelector`
1. Fleksibel : Memungkinkan penggunaan berbagai selector CSS untuk memilih elemen, termasuk ID, kelas, atribut, dan kombinasi.
---------------------------------
2. Kumpulan Selektor : Dapat menggabungkan beberapa selector CSS untuk pemilihan yang lebih spesifik.
---------------------------------
3. Mudah digunakan : Sintaks yang konsisten dan mudah dibaca.
---------------------------------


E. Kekurangan dan Alternatif :
1. Hanya elemen pertama : `querySelector` hanya mengembalikan elemen pertama yang cocok dengan selector. Jika anda perlu mengakses semua elemen yang cocok, gunakan selector `querySelectorAll`.
---------------------------------
2. Selector Kompleks : Kinerja dapat dipengaruhi jika selector sangat kompleks atau dokumen sangat besar.
---------------------------------

Alternatif :
1. `querySelectorAll` : Untuk memilih semua elemen yang cocok dengan selector CSS, gunakan `querySelectorAll`, yang mengembalikan  `NodeList` yang statis.
//var items = document.querySelectorAll('.item');
---------------------------------

F. Kesimpulan :
1. Metode : `document.querySelector(selector)`
---------------------------------
2. Fungsi : Mengakses elemen dalam dokumen HTML berdasarkan selector CSS.
---------------------------------
3. Kembalian : `Mengakses elemen pertama yang cocok dengan selectord; 
             Mengembalikan `null` jika tidak ada elemen yang cocok.`
---------------------------------
4. Kelebihan : Fleksibal dan mendukung berbagai selector CSS; sintaks mudah 
---------------------------------
5. Kekurangan: Hanya mengembalikan elemen pertama yang cocok; alternatif seperti 
              querySelectorAll dapat digunakan untuk pemilihan semua elemen 
              yang cocok.














































